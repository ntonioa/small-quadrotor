// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: <lambda>
 *
 * Args:
 *     phi: Scalar
 *     theta: Scalar
 *     psi: Scalar
 *
 * Outputs:
 *     qd_storage: Matrix41
 */
template <typename Scalar>
void QdFromRpy(const Scalar phi, const Scalar theta, const Scalar psi,
               Eigen::Matrix<Scalar, 4, 1>* const qd_storage = nullptr) {
  // Total ops: 25

  // Input arrays

  // Intermediate terms (13)
  const Scalar _tmp0 = (Scalar(1) / Scalar(2)) * theta;
  const Scalar _tmp1 = std::cos(_tmp0);
  const Scalar _tmp2 = (Scalar(1) / Scalar(2)) * psi;
  const Scalar _tmp3 = std::cos(_tmp2);
  const Scalar _tmp4 = (Scalar(1) / Scalar(2)) * phi;
  const Scalar _tmp5 = std::cos(_tmp4);
  const Scalar _tmp6 = _tmp3 * _tmp5;
  const Scalar _tmp7 = std::sin(_tmp0);
  const Scalar _tmp8 = std::sin(_tmp4);
  const Scalar _tmp9 = std::sin(_tmp2);
  const Scalar _tmp10 = _tmp8 * _tmp9;
  const Scalar _tmp11 = _tmp3 * _tmp8;
  const Scalar _tmp12 = _tmp5 * _tmp9;

  // Output terms (1)
  if (qd_storage != nullptr) {
    Eigen::Matrix<Scalar, 4, 1>& _qd_storage = (*qd_storage);

    _qd_storage(0, 0) = _tmp1 * _tmp6 + _tmp10 * _tmp7;
    _qd_storage(1, 0) = _tmp1 * _tmp11 - _tmp12 * _tmp7;
    _qd_storage(2, 0) = _tmp1 * _tmp10 + _tmp6 * _tmp7;
    _qd_storage(3, 0) = _tmp1 * _tmp12 - _tmp11 * _tmp7;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
