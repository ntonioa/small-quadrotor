// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: measurement_function
 *
 * Args:
 *     state_vec: Matrix71
 *
 * Outputs:
 *     z_pred: Matrix31
 */
template <typename Scalar>
void PredictMeasurement(const Eigen::Matrix<Scalar, 7, 1>& state_vec,
                        Eigen::Matrix<Scalar, 3, 1>* const z_pred = nullptr) {
  // Total ops: 15

  // Input arrays

  // Intermediate terms (2)
  const Scalar _tmp0 = 2 * state_vec(2, 0);
  const Scalar _tmp1 = 2 * state_vec(1, 0);

  // Output terms (1)
  if (z_pred != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _z_pred = (*z_pred);

    _z_pred(0, 0) = -_tmp0 * state_vec(0, 0) - _tmp1 * state_vec(3, 0);
    _z_pred(1, 0) = -_tmp0 * state_vec(3, 0) + _tmp1 * state_vec(0, 0);
    _z_pred(2, 0) =
        2 * std::pow(state_vec(1, 0), Scalar(2)) + 2 * std::pow(state_vec(2, 0), Scalar(2)) - 1;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
