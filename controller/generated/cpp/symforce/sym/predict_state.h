// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: state_transition_function
 *
 * Args:
 *     state_vec: Matrix71
 *     dt: Scalar
 *
 * Outputs:
 *     x_next: Matrix71
 */
template <typename Scalar>
void PredictState(const Eigen::Matrix<Scalar, 7, 1>& state_vec, const Scalar dt,
                  Eigen::Matrix<Scalar, 7, 1>* const x_next = nullptr) {
  // Total ops: 163

  // Input arrays

  // Intermediate terms (32)
  const Scalar _tmp0 = state_vec(0, 0) * state_vec(6, 0) + state_vec(1, 0) * state_vec(5, 0) -
                       state_vec(2, 0) * state_vec(4, 0);
  const Scalar _tmp1 = Scalar(0.25) * dt;
  const Scalar _tmp2 = _tmp0 * _tmp1 + state_vec(0, 0);
  const Scalar _tmp3 = -state_vec(1, 0) * state_vec(4, 0) - state_vec(2, 0) * state_vec(5, 0) +
                       state_vec(3, 0) * state_vec(6, 0);
  const Scalar _tmp4 = _tmp1 * _tmp3 + state_vec(3, 0);
  const Scalar _tmp5 = -state_vec(0, 0) * state_vec(5, 0) + state_vec(1, 0) * state_vec(6, 0) +
                       state_vec(3, 0) * state_vec(4, 0);
  const Scalar _tmp6 = _tmp1 * _tmp5 + state_vec(1, 0);
  const Scalar _tmp7 = -_tmp2 * state_vec(5, 0) + _tmp4 * state_vec(4, 0) + _tmp6 * state_vec(6, 0);
  const Scalar _tmp8 = _tmp1 * _tmp7 + state_vec(1, 0);
  const Scalar _tmp9 = state_vec(0, 0) * state_vec(4, 0) + state_vec(2, 0) * state_vec(6, 0) +
                       state_vec(3, 0) * state_vec(5, 0);
  const Scalar _tmp10 = _tmp1 * _tmp9 + state_vec(2, 0);
  const Scalar _tmp11 =
      -_tmp10 * state_vec(4, 0) + _tmp2 * state_vec(6, 0) + _tmp6 * state_vec(5, 0);
  const Scalar _tmp12 = _tmp1 * _tmp11 + state_vec(0, 0);
  const Scalar _tmp13 =
      -_tmp10 * state_vec(5, 0) + _tmp4 * state_vec(6, 0) - _tmp6 * state_vec(4, 0);
  const Scalar _tmp14 = _tmp1 * _tmp13 + state_vec(3, 0);
  const Scalar _tmp15 =
      -_tmp12 * state_vec(5, 0) + _tmp14 * state_vec(4, 0) + _tmp8 * state_vec(6, 0);
  const Scalar _tmp16 = Scalar(0.5) * dt;
  const Scalar _tmp17 = _tmp15 * _tmp16 + state_vec(1, 0);
  const Scalar _tmp18 =
      _tmp10 * state_vec(6, 0) + _tmp2 * state_vec(4, 0) + _tmp4 * state_vec(5, 0);
  const Scalar _tmp19 = _tmp1 * _tmp18 + state_vec(2, 0);
  const Scalar _tmp20 =
      _tmp12 * state_vec(6, 0) - _tmp19 * state_vec(4, 0) + _tmp8 * state_vec(5, 0);
  const Scalar _tmp21 = _tmp16 * _tmp20 + state_vec(0, 0);
  const Scalar _tmp22 =
      _tmp14 * state_vec(6, 0) - _tmp19 * state_vec(5, 0) - _tmp8 * state_vec(4, 0);
  const Scalar _tmp23 = _tmp16 * _tmp22 + state_vec(3, 0);
  const Scalar _tmp24 = (Scalar(1) / Scalar(6)) * dt;
  const Scalar _tmp25 =
      _tmp24 * (Scalar(1.0) * _tmp15 + Scalar(0.5) * _tmp17 * state_vec(6, 0) -
                Scalar(0.5) * _tmp21 * state_vec(5, 0) + Scalar(0.5) * _tmp23 * state_vec(4, 0) +
                Scalar(0.5) * _tmp5 + Scalar(1.0) * _tmp7) +
      state_vec(1, 0);
  const Scalar _tmp26 =
      _tmp12 * state_vec(4, 0) + _tmp14 * state_vec(5, 0) + _tmp19 * state_vec(6, 0);
  const Scalar _tmp27 = _tmp16 * _tmp26 + state_vec(2, 0);
  const Scalar _tmp28 = _tmp24 * (Scalar(1.0) * _tmp13 - Scalar(0.5) * _tmp17 * state_vec(4, 0) +
                                  Scalar(1.0) * _tmp22 + Scalar(0.5) * _tmp23 * state_vec(6, 0) -
                                  Scalar(0.5) * _tmp27 * state_vec(5, 0) + Scalar(0.5) * _tmp3) +
                        state_vec(3, 0);
  const Scalar _tmp29 = _tmp24 * (Scalar(1.0) * _tmp18 + Scalar(0.5) * _tmp21 * state_vec(4, 0) +
                                  Scalar(0.5) * _tmp23 * state_vec(5, 0) + Scalar(1.0) * _tmp26 +
                                  Scalar(0.5) * _tmp27 * state_vec(6, 0) + Scalar(0.5) * _tmp9) +
                        state_vec(2, 0);
  const Scalar _tmp30 =
      _tmp24 * (Scalar(0.5) * _tmp0 + Scalar(1.0) * _tmp11 +
                Scalar(0.5) * _tmp17 * state_vec(5, 0) + Scalar(1.0) * _tmp20 +
                Scalar(0.5) * _tmp21 * state_vec(6, 0) - Scalar(0.5) * _tmp27 * state_vec(4, 0)) +
      state_vec(0, 0);
  const Scalar _tmp31 = std::pow(Scalar(std::pow(_tmp25, Scalar(2)) + std::pow(_tmp28, Scalar(2)) +
                                        std::pow(_tmp29, Scalar(2)) + std::pow(_tmp30, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));

  // Output terms (1)
  if (x_next != nullptr) {
    Eigen::Matrix<Scalar, 7, 1>& _x_next = (*x_next);

    _x_next(0, 0) = _tmp30 * _tmp31;
    _x_next(1, 0) = _tmp25 * _tmp31;
    _x_next(2, 0) = _tmp29 * _tmp31;
    _x_next(3, 0) = _tmp28 * _tmp31;
    _x_next(4, 0) = state_vec(4, 0);
    _x_next(5, 0) = state_vec(5, 0);
    _x_next(6, 0) = state_vec(6, 0);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
