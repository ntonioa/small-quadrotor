// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: <lambda>
 *
 * Args:
 *     x: Matrix71
 *
 * Outputs:
 *     H: Matrix67
 */
template <typename Scalar>
void JacobianH(const Eigen::Matrix<Scalar, 7, 1>& x,
               Eigen::Matrix<Scalar, 6, 7>* const H = nullptr) {
  // Total ops: 10

  // Input arrays

  // Intermediate terms (4)
  const Scalar _tmp0 = 2 * x(3, 0);
  const Scalar _tmp1 = 2 * x(2, 0);
  const Scalar _tmp2 = 2 * x(1, 0);
  const Scalar _tmp3 = 2 * x(0, 0);

  // Output terms (1)
  if (H != nullptr) {
    Eigen::Matrix<Scalar, 6, 7>& _H = (*H);

    _H.setZero();

    _H(4, 0) = _tmp0;
    _H(5, 0) = -_tmp1;
    _H(4, 1) = _tmp1;
    _H(5, 1) = _tmp0;
    _H(3, 2) = -4 * x(2, 0);
    _H(4, 2) = _tmp2;
    _H(5, 2) = -_tmp3;
    _H(3, 3) = -4 * x(3, 0);
    _H(4, 3) = _tmp3;
    _H(5, 3) = _tmp2;
    _H(0, 4) = 1;
    _H(1, 5) = 1;
    _H(2, 6) = 1;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
